[
  {
    "sha": "a989cbfa243ff3893bc619ef238f33d55121d752",
    "filename": "package.json",
    "status": "modified",
    "additions": 7,
    "deletions": 3,
    "changes": 10,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/package.json",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/package.json",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/package.json?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -12,7 +12,7 @@\n     \"test:ci\": \"npm run test-all\",\n     \"production\": \"NODE_ENV=production node ./src/index.js\",\n     \"preci_flow\": \"npm install\",\n-    \"ci_flow\": \"ci_flow --no-systest --no-publish\",\n+    \"ci_flow\": \"node ./test/getPullRequestLinesAdded.js\",\n     \"lint\": \"eslint \\\"src/**/*.js\\\" \\\"test/**/*.js\\\"\",\n     \"version\": \"echo skipping versioning\"\n   },\n@@ -33,6 +33,7 @@\n     \"eslint-config-airbnb-base\": \"^13.1.0\",\n     \"eslint-plugin-import\": \"^2.16.0\",\n     \"eslint-plugin-jest\": \"^22.3.2\",\n+    \"git-patch-additions\": \"^1.0.1\",\n     \"husky\": \"^1.3.1\",\n     \"jest\": \"^24.5.0\",\n     \"jest-github-reporter\": \"^0.3.4\",\n@@ -42,6 +43,7 @@\n     \"lp-node-ci\": \"^1.1.39\",\n     \"nock\": \"^10.0.6\",\n     \"oas-validator\": \"^3.3.0\",\n+    \"parse-diff\": \"^0.7.0\",\n     \"pino-pretty\": \"^2.5.0\"\n   },\n   \"dependencies\": {\n@@ -51,11 +53,13 @@\n     \"@liveperson/maven-node-utils\": \"^1.3.1\",\n     \"axios\": \"^0.19.0\",\n     \"dotenv-safe\": \"^6.1.0\",\n+    \"git-patch-parser\": \"^0.2.1\",\n     \"koa\": \"^2.7.0\",\n     \"koa-better-http-proxy\": \"^0.2.4\",\n     \"koa-bodyparser\": \"^4.2.1\",\n     \"koa-compose\": \"^4.1.0\",\n     \"koa-router\": \"^7.4.0\",\n-    \"pino\": \"^5.12.0\"\n+    \"pino\": \"^5.12.0\",\n+    \"simple-git\": \"^1.132.0\"\n   }\n-}\n\\ No newline at end of file\n+}"
  },
  {
    "sha": "3faebd61e742c528445ae4aa708e3db3b879e3e6",
    "filename": "src/routes/index.js",
    "status": "modified",
    "additions": 4,
    "deletions": 0,
    "changes": 4,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/src/routes/index.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/src/routes/index.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/src/routes/index.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -14,6 +14,10 @@ router.get('/v1/account/:accountId/next-actions',\n   koaAuthorizeApiKey('mavenask'),\n   proxy(process.env.MAVEN_NEXT_ACTIONS_URL, {\n     proxyReqOptDecorator(proxyReqOpts, ctx) {\n+      if (ctx.state === 3) {\n+        console.log('hi im 3!');\n+      }\n+\n       // use this service's API key instead of the clients api key which will not have access to\n       // next actions.\n       proxyReqOpts.headers['maven-api-key'] = process.env.MAVEN_API_KEY;"
  },
  {
    "sha": "864c8aff0ff5acb6bd5df39f814e04088cb16ce0",
    "filename": "test.js",
    "status": "added",
    "additions": 45,
    "deletions": 0,
    "changes": 45,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -0,0 +1,45 @@\n+// const gitPatchAdditions = require('git-patch-additions');\n+// const gitPatchParser = require('git-patch-parser');\n+const FileDiff = require('./test/fileDiff');\n+const patches = require('./test/fixtures/patches');\n+\n+// const results = [];\n+\n+// patches.forEach((patch) => {\n+//   const chunks = gitPatchParser.parseUnifiedDiff(patch.patch);\n+//   const file = {\n+//     name: patch.filename,\n+//     additions: [],\n+//   };\n+\n+//   chunks.forEach((chunk) => {\n+//     chunk.lines.forEach((line, index) => {\n+//       if (line.type !== 'added') {\n+//         return;\n+//       }\n+\n+//       const lineNumber = chunk.lineNumbers.added.start + index;\n+//       file.additions.push(lineNumber);\n+//     });\n+//   });\n+\n+//   results.push(file);\n+//   // console.log('patch.patch', patch.patch);\n+//   // console.log(JSON.stringify(, null, 2));\n+// });\n+\n+// console.log(results);\n+\n+const result = patches\n+  .map((patch) => {\n+    const fileDiff = new FileDiff(patch.patch);\n+    fileDiff.name = patch.filename;\n+    return fileDiff;\n+  })\n+  .filter(fileDiff => fileDiff.addedLines.length > 0)\n+  .map(fileDiff => ({\n+    filename: fileDiff.name,\n+    lines: fileDiff.addedLines.map(line => line.number),\n+  }));\n+\n+console.log(result);"
  },
  {
    "sha": "ea0aa456c6063087b24bcda9455d0c183a22a8c4",
    "filename": "test/createCheck.js",
    "status": "added",
    "additions": 186,
    "deletions": 0,
    "changes": 186,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/createCheck.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/createCheck.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/createCheck.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -0,0 +1,186 @@\n+// process.env.GH_API = 'https://lpgithub.dev.lprnd.net/api/v3';\n+// process.env.REPO = 'lp-mavenask-app';\n+// process.env.OWNER = 'core-ai';\n+\n+// const path = require('path');\n+// const stripAnsi = require('strip-ansi');\n+// const Octokit = require('@octokit/rest');\n+// const { App } = require('@octokit/app');\n+// const createCheck = require('create-check');\n+// const execa = require('execa');\n+// const envCi = require('env-ci');\n+\n+// const APP_ID = 5;\n+// /**\n+//  * Before you say anything I *know* this is horribly insecure.\n+//  *\n+//  * If we were not to to this then every user would have to create\n+//  * their own GitHub App and manage the APP_ID and PRIVATE_KEY through\n+//  * env vars.\n+//  *\n+//  * How could this go wrong? Well this PRIVATE_KEY only creates jwt\n+//  * tokens that work on people who have installed the Jest Results\n+//  * App. If an attacker got ahold of the token they could only read repo\n+//  * metadata and read/write checks. So the attack surface is really only\n+//  * messing with a users checks, which is not too risky.\n+//  */\n+// const PRIVATE_KEY = `-----BEGIN RSA PRIVATE KEY-----\n+// MIIEpAIBAAKCAQEA2lUt8VQdwRrDJp5W/gl7bMJK4+EkdKtDw/BM9Eu4HIbCSjW0\n+// pPw4KbQ2bKIPKySQF8vZ45x7JGMlL76XOLkH7gD1UKHi82Sxo+KWwOXnnCCzResp\n+// ng9f3hebTeb3aCk6otOUCzNr8NpybJ8xeLRbNezfws9XRhBDa/V2GkgyuPoEpSBL\n+// kjHJrKUm7/3FwadRZRdb7JZtOsWxEXA3HOMTQNLahUQQEYu+iprXf1oSsxIV2qji\n+// up4BZR2ABRq0Q2b/OMX9v4ITppliS6zh84FtYiJI8Zggcy5Zt3f5UzHdFI53WeDB\n+// Zmddjk9A/uPaKqswHWASiVJGHt4AWiJxK1y/WwIDAQABAoIBAQCPFroYal9hui9h\n+// tO4gaYh5W9CHDnu89q1f0bItfR55m5vj1NTCOAZ61n/ArGkyhjDlV5VCRcCytUOe\n+// ydMDushGpFwh7yb1Cu4dERhp7YLgYNH9JcTNsRfMTz5aTN+iZTrnkbB5ssawQAoz\n+// xBVBHTqV2dtAKnDxGyGEtIclbGHJteO5dVnIFh3uaHQ6ucKs9PXBfqbEjqqS6VkM\n+// Tzx1HqJ/PyZZybzcRekoJXNCo+IbwgkpoQCoa9oRqwR2mweOEO7rdd5X0QNB5Imn\n+// tYaOcPxNYSO1XtDe8Ni4jkiYdPZlN9BDm6sOyeJAfNixsn9+Qy89/m87xtCqFUT4\n+// IYa8aHOpAoGBAPEQHlAXcpAUkhAlxHdnnNSKBqE/iuKi3yy9ebafUlpUF9Q9XPDR\n+// inO0H6AoG1sGKpj3qdxkwsbQhDtSpPAEtnDiJPoWVeziwUl7hyPKbwhqQrDG09ir\n+// gpuFa7cPhc6HdMDJiLuXNCBXBiQ/SrveSF1yTN2enHLFSCHqeev59OzVAoGBAOfc\n+// gDg64heu0RM7BzamPUboEXkBHLxq+Oqh3LB399NY7HYkzuPBIslbOZ1qgHX7u+st\n+// f6tzU7BrBnW8DZqQZvbqRbdFEUOgENdr3t+dna6FmzMdCX1ey6Nv+aTcYIp8+H5e\n+// KJ9hFZYkIPBdbNmnv0OMh8/xRbE0QCjlQ3n4XVNvAoGACoMzbza2jkX3YLDk8ngY\n+// RMSIKXwF6IBFz0OsDSTBiKLmLyFF7lKVARq3zloxZzTLosQaKjxSqizpt1SRUM5D\n+// zoRuLGHQ+XWiDDxQ1mS7lthbdC4Xivlfxrx4yBDrOuh5VPb0+YlMgqSI5gfEkJDP\n+// AxQ6+ecy12Z3ENOS4ZGS9skCgYA/eCjRO60wdnZdIUd0OkWD53sA+MD5Av9omy5i\n+// UDTS8gCoxqKrze7L1+EJqmHH6kUit62/LS63mFSIXhYLPYQyCydSZ+G19Vcm4Sx9\n+// YhQL9h7p+wTiANUVxE0+R+VVg6gyT2wnVNgn5XPu2GQ3oKfGwe1bitxdCcSWbUvv\n+// U4GYmQKBgQDbGPGHrTqt9ZCOu58O84rLH24BMWOZV01QE6yrFeZOt9Wj8Nvq4itw\n+// K3F1mK7mYXpQSY8K/qQtU1B3X3BnmPGUkagVhPYDhnEE4bwzJQ6PCAhu+6GeTQ05\n+// HcT/1pmiOPWS0mTmKrlO1swsReJ+JfNu+s/lAf/Y41zki/rlxN6VBA==\n+// -----END RSA PRIVATE KEY-----\n+// `;\n+\n+\n+// function createAnnotations(results) {\n+//   const annotations = [];\n+\n+//   for (const result of results) {\n+//     const { testFilePath, testResults } = result;\n+\n+//     for (const failure of testResults) {\n+//       if ('location' in failure) {\n+//         const { location = {}, failureMessages } = failure;\n+\n+//         if (location) {\n+//           failureMessages.forEach((message) => {\n+//             const numbers = message.match(\n+//               new RegExp(`${result.testFilePath}:(\\\\d+):\\\\d+`),\n+//             );\n+//             const start_line = numbers ? Number(numbers[1]) : location.line || 0;\n+\n+//             annotations.push({\n+//               path: path.relative(process.cwd(), testFilePath),\n+//               start_line,\n+//               end_line: start_line,\n+//               annotation_level: 'failure',\n+//               message: failureMessages.map(stripAnsi).join('\\n'),\n+//             });\n+//           });\n+//         }\n+//       }\n+//     }\n+//   }\n+\n+//   return annotations;\n+// }\n+\n+// const { isCi, ...env } = envCi();\n+\n+// async function getRepositoryParameters() {\n+//   const regex = /https?:\\/\\/.*\\/(.+)\\/(.+)\\.git/;\n+//   const url = (await execa('git', ['rev-parse', 'HEAD'])).stdout;\n+//   const match = url.match(regex);\n+//   if (match) {\n+//     const [, owner = process.env.OWNER, repo = process.env.REPO] = match;\n+//     return { owner, repo };\n+//   }\n+\n+//   if ('slug' in env) {\n+//     const [owner = process.env.OWNER || '', repo = process.env.REPO || ''] =\n+// 'slug' in env ? env.slug.split('/') : [];\n+//     return { owner, repo };\n+//   }\n+\n+//   return {\n+//     owner: process.env.OWNER,\n+//     repo: process.env.REPO,\n+//   };\n+// }\n+\n+// async function getApp(app, baseUrl) {\n+//   const jwt = app.getSignedJsonWebToken();\n+\n+//   const octokit = new Octokit({\n+//     auth: jwt,\n+//     baseUrl,\n+//   });\n+\n+//   return octokit.apps.getAuthenticated();\n+// }\n+\n+\n+// async function authenticateApp(app, baseUrl) {\n+//   const jwt = app.getSignedJsonWebToken();\n+//   const appOctokit = new Octokit({ auth: jwt, baseUrl });\n+//   const { owner = '', repo = '' } = await getRepositoryParameters();\n+//   const { data } = await appOctokit.apps.getRepoInstallation({\n+//     owner,\n+//     repo,\n+//   });\n+\n+//   const token = await app.getInstallationAccessToken({\n+//     installationId: data.id,\n+//   });\n+\n+//   return new Octokit({ auth: token, baseUrl });\n+// }\n+\n+// async function getPullRequestLinesAdded() {\n+//   const baseUrl = process.env.GH_API || process.env.GITHUB_URL || 'https://api.github.com';\n+//   const app = new App({\n+//     id: APP_ID,\n+//     PRIVATE_KEY,\n+//     baseUrl,\n+//   });\n+//   const HEAD = (await execa('git', ['rev-parse', 'HEAD'])).stdout;\n+//   const PRE_HEAD = (await execa('git', ['rev-parse', 'HEAD^1'])).stdout;\n+//   const appInfo = await getApp(app, baseUrl);\n+//   const octokit = await authenticateApp(app, baseUrl);\n+//   const { owner, repo } = getRepositoryParameters();\n+\n+//   const pullRequests = await octokit.pulls.list({\n+//     owner,\n+//     repo,\n+//   });\n+\n+//   console.log('pullRequests', )\n+// }\n+\n+\n+// async function createUncoveredLineAnnotations(results, config) {\n+//   const pullRequest = await getPullRequestLinesAdded();\n+// }\n+\n+\n+// module.exports = async (results, config) => {\n+//   const annotations = [\n+//     ...createAnnotations(results),\n+//     ...(await createUncoveredLineAnnotations(results, config)),\n+//   ];\n+\n+//   const errorCount = annotations\n+//     .filter(annotation => annotation.annotation_level === 'failure')\n+//     .length;\n+\n+//   return createCheck({\n+//     tool: 'Jest',\n+//     name: 'Test',\n+//     annotations,\n+//     errorCount,\n+//     appId: process.env.JEST_APP_ID ? Number(process.env.JEST_APP_ID) : APP_ID,\n+//     privateKey: process.env.JEST_PRIVATE_KEY || PRIVATE_KEY,\n+//   });\n+// };"
  },
  {
    "sha": "9a24e5c6cfdfbd22199e1cf5eec154e709a84732",
    "filename": "test/fileDiff.js",
    "status": "added",
    "additions": 68,
    "deletions": 0,
    "changes": 68,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/fileDiff.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/fileDiff.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/fileDiff.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -0,0 +1,68 @@\n+module.exports = class FileDiff {\n+  static get FileNameRegex() {\n+    return /^diff --git a.+ b\\/(.+)$/gm;\n+  }\n+\n+  static get FileDiffRegex() {\n+    return /@@\\n([\\s\\S]+)/gm;\n+  }\n+\n+  constructor(diffRaw) {\n+    if (!diffRaw || typeof diffRaw !== 'string' || diffRaw.length === 0) {\n+      throw new Error('raw diff should be passed');\n+    }\n+\n+    this.diffRaw = diffRaw;\n+    this.name = null;\n+    this.addedLines = null;\n+\n+    this.parseRawDiff();\n+  }\n+\n+  parseRawDiff() {\n+    this.name = this.getNameFromRawDiff();\n+    this.addedLines = this.getAddedLinesFromDiff();\n+  }\n+\n+  getNameFromRawDiff() {\n+    const match = FileDiff.FileNameRegex.exec(this.diffRaw);\n+\n+    return match && match[1];\n+  }\n+\n+  getAddedLinesFromDiff() {\n+    const targetFileContent = this.getTargetFileContent();\n+\n+    return targetFileContent.split('\\n').reduce((lines, line, index) => {\n+      if (line.startsWith('+')) {\n+        return [...lines, { content: line, number: index }];\n+      }\n+\n+      return lines;\n+    }, []);\n+  }\n+\n+  getTargetFileContent() {\n+    const fileDiff = this.getFileDiff();\n+\n+    return fileDiff.replace(/^-.*\\n*\\r*/gm, '');\n+  }\n+\n+  getFileDiff() {\n+    const match = FileDiff.FileDiffRegex.exec(this.diffRaw);\n+\n+    return (match && match[1]) || '';\n+  }\n+\n+  get Name() {\n+    return this.name;\n+  }\n+\n+  get AddedLineNumbers() {\n+    return this.addedLines.map(line => line.number);\n+  }\n+\n+  get AddedLines() {\n+    return this.addedLines;\n+  }\n+};"
  },
  {
    "sha": "326573d208a9719c0a499b678ec0a437a0a21e54",
    "filename": "test/fixtures/patches.json",
    "status": "added",
    "additions": 14,
    "deletions": 0,
    "changes": 14,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/fixtures/patches.json",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/fixtures/patches.json",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/fixtures/patches.json?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -0,0 +1,14 @@\n+[\n+  {\n+    \"filename\": \"package.json\",\n+    \"patch\": \"@@ -12,7 +12,7 @@\\n     \\\"test:ci\\\": \\\"npm run test-all\\\",\\n     \\\"production\\\": \\\"NODE_ENV=production node ./src/index.js\\\",\\n     \\\"preci_flow\\\": \\\"npm install\\\",\\n-    \\\"ci_flow\\\": \\\"ci_flow --no-systest --no-publish\\\",\\n+    \\\"ci_flow\\\": \\\"node ./test/getPullRequestLinesAdded.js\\\",\\n     \\\"lint\\\": \\\"eslint \\\\\\\"src/**/*.js\\\\\\\" \\\\\\\"test/**/*.js\\\\\\\"\\\",\\n     \\\"version\\\": \\\"echo skipping versioning\\\"\\n   },\\n@@ -42,6 +42,7 @@\\n     \\\"lp-node-ci\\\": \\\"^1.1.39\\\",\\n     \\\"nock\\\": \\\"^10.0.6\\\",\\n     \\\"oas-validator\\\": \\\"^3.3.0\\\",\\n+    \\\"parse-diff\\\": \\\"^0.7.0\\\",\\n     \\\"pino-pretty\\\": \\\"^2.5.0\\\"\\n   },\\n   \\\"dependencies\\\": {\\n@@ -56,6 +57,7 @@\\n     \\\"koa-bodyparser\\\": \\\"^4.2.1\\\",\\n     \\\"koa-compose\\\": \\\"^4.1.0\\\",\\n     \\\"koa-router\\\": \\\"^7.4.0\\\",\\n-    \\\"pino\\\": \\\"^5.12.0\\\"\\n+    \\\"pino\\\": \\\"^5.12.0\\\",\\n+    \\\"simple-git\\\": \\\"^1.132.0\\\"\\n   }\\n-}\\n\\\\ No newline at end of file\\n+}\"\n+  },\n+  {\n+    \"filename\": \"jestLinceCoverageReporter\",\n+    \"patch\": \"@@ -0,0 +1,22 @@\\n+// const { createFileCoverage } = require('istanbul-lib-coverage');\\n+// const fs = require('fs');\\n+\\n+// class JestLineCoverageGithubReporter {\\n+//   onRunComplete(contexts, results) {\\n+//     const testFileCoverageData = results\\n+//       .coverageMap\\n+//       .data['/Users/ajiron/liveperson/lp-mavenask-app/src/routes/health.js'];\\n+\\n+//     const fileCoverage = createFileCoverage(testFileCoverageData);\\n+\\n+//     console.log('Custom reporter output:');\\n+//     // console.log('contexts: ', contexts);\\n+//     // console.log('uncoveredLines:', fileCoverage.getUncoveredLines());\\n+//     // console.log('coverageMap:', JSON.stringify(results, null, 2));\\n+\\n+//     fs.writeFileSync('./results.json', JSON.stringify(results, null, 2));\\n+//   }\\n+// }\\n+\\n+\\n+// module.exports = JestLineCoverageGithubReporter;\"\n+  },\n+  {\n+    \"filename\": \"health.js\",\n+    \"patch\": \"@@ -14,6 +14,10 @@ router.get('/v1/account/:accountId/next-actions',\\n   koaAuthorizeApiKey('mavenask'),\\n   proxy(process.env.MAVEN_NEXT_ACTIONS_URL, {\\n     proxyReqOptDecorator(proxyReqOpts, ctx) {\\n+      if (ctx.state === 3) {\\n+        console.log('hi im 3!');\\n+      }\\n+\\n       // use this service's API key instead of the clients api key which will not have access to\\n       // next actions.\\n       proxyReqOpts.headers['maven-api-key'] = process.env.MAVEN_API_KEY;\"\n+  }\n+]\n\\ No newline at end of file"
  },
  {
    "sha": "21d44bc0efec6cc9ceedd0d6b3c5aef552f8c015",
    "filename": "test/fixtures/pullRequests.json",
    "status": "added",
    "additions": 37,
    "deletions": 0,
    "changes": 37,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/fixtures/pullRequests.json",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/fixtures/pullRequests.json",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/fixtures/pullRequests.json?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -0,0 +1,37 @@\n+[\n+  {\n+    \"url\": \"https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/pulls/32\",\n+    \"id\": 110136,\n+    \"node_id\": \"MDExOlB1bGxSZXF1ZXN0MTEwMTM2\",\n+    \"html_url\": \"https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/pull/32\",\n+    \"diff_url\": \"https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/pull/32.diff\",\n+    \"patch_url\": \"https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/pull/32.patch\",\n+    \"issue_url\": \"https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/issues/32\",\n+    \"number\": 32,\n+    \"state\": \"open\",\n+    \"locked\": false,\n+    \"title\": \"Test PR for jest github line coverage (DO NO MERGE)\",\n+    \"user\": {},\n+    \"body\": \"\",\n+    \"created_at\": \"2020-03-13T20:05:52Z\",\n+    \"updated_at\": \"2020-03-13T20:08:29Z\",\n+    \"closed_at\": null,\n+    \"merged_at\": null,\n+    \"merge_commit_sha\": \"9aee173d34a147d0ff01a40442e9eba480236308\",\n+    \"assignee\": null,\n+    \"assignees\": [],\n+    \"requested_reviewers\": [],\n+    \"requested_teams\": [],\n+    \"labels\": [],\n+    \"milestone\": null,\n+    \"commits_url\": \"https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/pulls/32/commits\",\n+    \"review_comments_url\": \"https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/pulls/32/comments\",\n+    \"review_comment_url\": \"https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/pulls/comments{/number}\",\n+    \"comments_url\": \"https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/issues/32/comments\",\n+    \"statuses_url\": \"https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/statuses/e70c1d5a1b8724d2c48d7af3fbe68760ce103dce\",\n+    \"head\": {},\n+    \"base\": {},\n+    \"_links\": {},\n+    \"author_association\": \"CONTRIBUTOR\"\n+  }\n+]\n\\ No newline at end of file"
  },
  {
    "sha": "2d517b80bef3f25d7770ba33226def65de61f96c",
    "filename": "test/getPullRequestLinesAdded.js",
    "status": "added",
    "additions": 226,
    "deletions": 0,
    "changes": 226,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/getPullRequestLinesAdded.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/getPullRequestLinesAdded.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/getPullRequestLinesAdded.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -0,0 +1,226 @@\n+/* eslint-disable import/no-extraneous-dependencies */\n+// process.env.GH_API = 'https://lpgithub.dev.lprnd.net/api/v3';\n+// process.env.REPO = 'lp-mavenask-app';\n+// process.env.OWNER = 'core-ai';\n+\n+const Octokit = require('@octokit/rest');\n+const { App } = require('@octokit/app');\n+const execa = require('execa');\n+const envCi = require('env-ci');\n+// const gitPatchParser = require('git-patch-parser');\n+const FileDiff = require('./fileDiff');\n+\n+const APP_ID = 5;\n+const PRIVATE_KEY = `-----BEGIN RSA PRIVATE KEY-----\n+MIIEpAIBAAKCAQEA2lUt8VQdwRrDJp5W/gl7bMJK4+EkdKtDw/BM9Eu4HIbCSjW0\n+pPw4KbQ2bKIPKySQF8vZ45x7JGMlL76XOLkH7gD1UKHi82Sxo+KWwOXnnCCzResp\n+ng9f3hebTeb3aCk6otOUCzNr8NpybJ8xeLRbNezfws9XRhBDa/V2GkgyuPoEpSBL\n+kjHJrKUm7/3FwadRZRdb7JZtOsWxEXA3HOMTQNLahUQQEYu+iprXf1oSsxIV2qji\n+up4BZR2ABRq0Q2b/OMX9v4ITppliS6zh84FtYiJI8Zggcy5Zt3f5UzHdFI53WeDB\n+Zmddjk9A/uPaKqswHWASiVJGHt4AWiJxK1y/WwIDAQABAoIBAQCPFroYal9hui9h\n+tO4gaYh5W9CHDnu89q1f0bItfR55m5vj1NTCOAZ61n/ArGkyhjDlV5VCRcCytUOe\n+ydMDushGpFwh7yb1Cu4dERhp7YLgYNH9JcTNsRfMTz5aTN+iZTrnkbB5ssawQAoz\n+xBVBHTqV2dtAKnDxGyGEtIclbGHJteO5dVnIFh3uaHQ6ucKs9PXBfqbEjqqS6VkM\n+Tzx1HqJ/PyZZybzcRekoJXNCo+IbwgkpoQCoa9oRqwR2mweOEO7rdd5X0QNB5Imn\n+tYaOcPxNYSO1XtDe8Ni4jkiYdPZlN9BDm6sOyeJAfNixsn9+Qy89/m87xtCqFUT4\n+IYa8aHOpAoGBAPEQHlAXcpAUkhAlxHdnnNSKBqE/iuKi3yy9ebafUlpUF9Q9XPDR\n+inO0H6AoG1sGKpj3qdxkwsbQhDtSpPAEtnDiJPoWVeziwUl7hyPKbwhqQrDG09ir\n+gpuFa7cPhc6HdMDJiLuXNCBXBiQ/SrveSF1yTN2enHLFSCHqeev59OzVAoGBAOfc\n+gDg64heu0RM7BzamPUboEXkBHLxq+Oqh3LB399NY7HYkzuPBIslbOZ1qgHX7u+st\n+f6tzU7BrBnW8DZqQZvbqRbdFEUOgENdr3t+dna6FmzMdCX1ey6Nv+aTcYIp8+H5e\n+KJ9hFZYkIPBdbNmnv0OMh8/xRbE0QCjlQ3n4XVNvAoGACoMzbza2jkX3YLDk8ngY\n+RMSIKXwF6IBFz0OsDSTBiKLmLyFF7lKVARq3zloxZzTLosQaKjxSqizpt1SRUM5D\n+zoRuLGHQ+XWiDDxQ1mS7lthbdC4Xivlfxrx4yBDrOuh5VPb0+YlMgqSI5gfEkJDP\n+AxQ6+ecy12Z3ENOS4ZGS9skCgYA/eCjRO60wdnZdIUd0OkWD53sA+MD5Av9omy5i\n+UDTS8gCoxqKrze7L1+EJqmHH6kUit62/LS63mFSIXhYLPYQyCydSZ+G19Vcm4Sx9\n+YhQL9h7p+wTiANUVxE0+R+VVg6gyT2wnVNgn5XPu2GQ3oKfGwe1bitxdCcSWbUvv\n+U4GYmQKBgQDbGPGHrTqt9ZCOu58O84rLH24BMWOZV01QE6yrFeZOt9Wj8Nvq4itw\n+K3F1mK7mYXpQSY8K/qQtU1B3X3BnmPGUkagVhPYDhnEE4bwzJQ6PCAhu+6GeTQ05\n+HcT/1pmiOPWS0mTmKrlO1swsReJ+JfNu+s/lAf/Y41zki/rlxN6VBA==\n+-----END RSA PRIVATE KEY-----\n+`;\n+\n+\n+const { isCi, ...env } = envCi();\n+\n+async function getRepositoryParameters() {\n+  const regex = /https?:\\/\\/.*\\/(.+)\\/(.+)\\.git/;\n+  const url = (await execa('git', ['rev-parse', 'HEAD'])).stdout;\n+  const match = url.match(regex);\n+  if (match) {\n+    const [, owner = process.env.OWNER, repo = process.env.REPO] = match;\n+    return { owner, repo };\n+  }\n+\n+  if ('slug' in env) {\n+    const [owner = process.env.OWNER || '', repo = process.env.REPO || ''] = 'slug' in env ? env.slug.split('/') : [];\n+    return { owner, repo };\n+  }\n+\n+  return {\n+    owner: process.env.OWNER,\n+    repo: process.env.REPO,\n+  };\n+}\n+\n+// async function getApp(app, baseUrl) {\n+//   const jwt = app.getSignedJsonWebToken();\n+//   console.log(jwt);\n+//   const octokit = new Octokit({\n+//     auth: jwt,\n+//     baseUrl,\n+//   });\n+\n+//   return octokit.apps.getAuthenticated();\n+// }\n+\n+// async function fetchInstallationId(jwt, baseUrl) {\n+//   const { data } = await axios.get(`${baseUrl}/repos/${owner}/${repo}/installation`, {\n+//     headers: {\n+//       authorization: `bearer ${jwt}`,\n+//       accept: 'application/vnd.github.machine-man-preview+json',\n+//     },\n+//   });\n+//   console.log('data', data);\n+//   return data.id;\n+// }\n+\n+async function authenticateApp() {\n+  const baseUrl = process.env.GH_API || process.env.GITHUB_URL || 'https://api.github.com';\n+  const app = new App({\n+    id: APP_ID,\n+    privateKey: PRIVATE_KEY,\n+    baseUrl,\n+  });\n+\n+\n+  const jwt = app.getSignedJsonWebToken();\n+\n+  const appOctokit = new Octokit({ auth: jwt, baseUrl });\n+  const { owner = '', repo = '' } = await getRepositoryParameters();\n+  const { data } = await appOctokit.apps.getRepoInstallation({\n+    owner,\n+    repo,\n+  });\n+\n+  const token = await app.getInstallationAccessToken({\n+    installationId: data.id,\n+  });\n+  global.accessToken = token;\n+\n+  return new Octokit({ auth: token, baseUrl });\n+}\n+\n+// async function fetchPatch(patchUrl) {\n+//   const baseUrl = process.env.GH_API || process.env.GITHUB_URL || 'https://api.github.com';\n+//   const app = new App({\n+//     id: APP_ID,\n+//     privateKey: PRIVATE_KEY,\n+//     baseUrl,\n+//   });\n+\n+//   // await getApp(app, baseUrl);\n+\n+//   const jwt = app.getSignedJsonWebToken();\n+\n+\n+//   const { data } = await axios.get(patchUrl, {\n+//     params: {\n+//       access_token: global.accessToken,\n+//     },\n+//     headers: {\n+//       accept: 'application/vnd.github.3.patch',\n+//       authorization: `bearer ${jwt}`,\n+//     },\n+//   });\n+//   return data;\n+// }\n+\n+// function getPatchAdditions(patch) {\n+//   console.log('getPatchAdditions', patch);\n+\n+//   const additions = [];\n+\n+//   try {\n+//     const chunks = gitPatchParser.parseUnifiedDiff(patch.patch);\n+\n+//     chunks.forEach((chunk) => {\n+//       chunk.lines.forEach((line, index) => {\n+//         if (line.type !== 'added') {\n+//           return;\n+//         }\n+\n+//         const lineNumber = chunk.lineNumbers.added.start + index;\n+//         additions.push(lineNumber);\n+//       });\n+//     });\n+//   } catch (error) {\n+//     console.error(error);\n+//   }\n+\n+\n+//   return additions;\n+// }\n+\n+function getPatchAdditions(patch) {\n+  const fileDiff = new FileDiff(patch);\n+  return fileDiff.addedLines.map(addition => addition.number);\n+}\n+\n+async function getPullRequestLinesAdded() {\n+  const octokit = await authenticateApp();\n+\n+  const { owner, repo } = await getRepositoryParameters();\n+  const { data } = await octokit.pulls.list({\n+    owner,\n+    repo,\n+    head: env.commit,\n+    state: 'open',\n+    per_page: 1,\n+    page: 0,\n+  });\n+\n+  console.log('pulls', data);\n+\n+  const pullNumber = data[0].number;\n+  console.log('pull_number', pullNumber);\n+\n+  // const patch = await fetchPatch(data[0].patch_url);\n+\n+  // console.log('patch', JSON.stringify(patch, null, 2));\n+\n+  // console.log('additions', JSON.stringify(gitPatchAdditions(patch), null, 2));\n+\n+  const response = await octokit.pulls.listFiles({\n+    owner,\n+    repo,\n+    pull_number: pullNumber,\n+  });\n+\n+  console.log('files', response.data);\n+\n+\n+  console.log('listFiles - typeof ', typeof response.data);\n+  // console.log('listFiles - raw', response.data);\n+  // console.log('listFiles', JSON.stringify(response.data, null, 2));\n+\n+  const diffs = response.data\n+    .filter(file => file.additions > 0)\n+    .map((file) => {\n+      const additions = getPatchAdditions(file.patch);\n+\n+      return {\n+        filename: file.filename,\n+        additions,\n+      };\n+    });\n+\n+  console.log('diffs', JSON.stringify(diffs, null, 2));\n+}\n+\n+\n+getPullRequestLinesAdded()\n+  .catch(error => console.error(error));\n+\n+\n+// module.exports = getPullRequestLinesAdded;"
  },
  {
    "sha": "5aecc011c226975e1d3856c9df803243d70c72de",
    "filename": "test/jest.all.config.js",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/jest.all.config.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/jest.all.config.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/jest.all.config.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -15,6 +15,7 @@ module.exports = {\n   reporters: [\n     'default',\n     'jest-github-reporter',\n+    // '<rootDir>/test/jestLineCoverageGithubReporter.js',\n   ],\n   testResultsProcessor: 'jest-teamcity-reporter',\n };"
  },
  {
    "sha": "86f6e6837bea78c061b3845132ce5eafaf7fcb38",
    "filename": "test/jest.unit.config.js",
    "status": "modified",
    "additions": 7,
    "deletions": 2,
    "changes": 9,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/jest.unit.config.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/jest.unit.config.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/jest.unit.config.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -1,5 +1,10 @@\n module.exports = {\n   testEnvironment: 'node',\n-  globalSetup: '<rootDir>/unit/globalSetup.js',\n-  testMatch: ['**/unit/*.test.js'],\n+  rootDir: '../',\n+  globalSetup: '<rootDir>/test/unit/globalSetup.js',\n+  testMatch: ['<rootDir>/**/unit/*.test.js'],\n+  collectCoverage: true,\n+  collectCoverageFrom: [\n+    '<rootDir>/src/**/*.js',\n+  ],\n };"
  },
  {
    "sha": "624c5f0ec5e093fbdb57dd270537522c28cf2f3f",
    "filename": "test/jestLineCoverageGithubReporter.js",
    "status": "added",
    "additions": 22,
    "deletions": 0,
    "changes": 22,
    "blob_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/blob/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/jestLineCoverageGithubReporter.js",
    "raw_url": "https://lpgithub.dev.lprnd.net/Core-AI/lp-mavenask-app/raw/ee524731e2158996b8ef8c17523dfab59d4e5ed7/test/jestLineCoverageGithubReporter.js",
    "contents_url": "https://lpgithub.dev.lprnd.net/api/v3/repos/Core-AI/lp-mavenask-app/contents/test/jestLineCoverageGithubReporter.js?ref=ee524731e2158996b8ef8c17523dfab59d4e5ed7",
    "patch": "@@ -0,0 +1,22 @@\n+// const { createFileCoverage } = require('istanbul-lib-coverage');\n+// const fs = require('fs');\n+\n+// class JestLineCoverageGithubReporter {\n+//   onRunComplete(contexts, results) {\n+//     const testFileCoverageData = results\n+//       .coverageMap\n+//       .data['/Users/ajiron/liveperson/lp-mavenask-app/src/routes/health.js'];\n+\n+//     const fileCoverage = createFileCoverage(testFileCoverageData);\n+\n+//     console.log('Custom reporter output:');\n+//     // console.log('contexts: ', contexts);\n+//     // console.log('uncoveredLines:', fileCoverage.getUncoveredLines());\n+//     // console.log('coverageMap:', JSON.stringify(results, null, 2));\n+\n+//     fs.writeFileSync('./results.json', JSON.stringify(results, null, 2));\n+//   }\n+// }\n+\n+\n+// module.exports = JestLineCoverageGithubReporter;"
  }
]